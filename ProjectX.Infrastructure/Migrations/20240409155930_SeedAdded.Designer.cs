// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectX.Infrastructure.Data;

#nullable disable

namespace ProjectX.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240409155930_SeedAdded")]
    partial class SeedAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Chat.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Chat.ChatRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SalonId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Salon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Salons");

                    b.HasData(
                        new
                        {
                            Id = 20,
                            Address = "Център, ул. Александър Стамболийски 9",
                            City = "Свищов",
                            Description = "Салон за маникюр",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d5777.085309706417!2d25.3442666!3d43.6160633!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40aea1f74f8db6d7%3A0xd99b65173dd11469!2z4oCcTGEgZmFtbWXigJ0!5e0!3m2!1sbg!2sbg!4v1711382622231!5m2!1sbg!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "La Famme",
                            OwnerId = "e0b4f60e-97d7-4d4c-bd9c-af9fdb80a12a",
                            PhoneNumber = "0879425962",
                            ProfilePictureUrl = "https://i.imgur.com/gqbirC4.jpeg"
                        },
                        new
                        {
                            Id = 21,
                            Address = "Плевен Център, бул. „Русе“ 41",
                            City = "Плевен",
                            Description = "Качествено обслужване и любезно отношение",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d11593.032916301672!2d24.618113!3d43.4134312!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40abf5b3df4f8007%3A0x6f67c2632e3dd468!2zIk15c3RpYyI!5e0!3m2!1sbg!2sbg!4v1711382732592!5m2!1sbg!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Mystic",
                            OwnerId = "f8c71f1f-00d7-4f20-83d0-af5d2c6ab9e1",
                            PhoneNumber = "0877494952",
                            ProfilePictureUrl = "https://i.imgur.com/vfnVhfJ.jpeg"
                        },
                        new
                        {
                            Id = 24,
                            Address = "Ruse Center, ul. \"Chavdar voyvoda\" 14, 7002 Ruse",
                            City = "Русе",
                            Description = "The best manicurist in town",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d46033.183433977734!2d25.880205548632812!3d43.85429559999999!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40ae60cc33356905%3A0x5b71f9abc1296973!2sNail%20Art%20%26%20Make%20Up%20Atelie%20Maya%20Ilieva!5e0!3m2!1sen!2sbg!4v1712669597567!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Nail Art & Make Up Atelie Maya Ilieva",
                            OwnerId = "eb257b08-cc37-41c6-9bc4-7b85cf4dcb1e",
                            PhoneNumber = "0895338842",
                            ProfilePictureUrl = "https://cdn.oink.bg/gallery/48108/007c1ac7-47db-4e6d-bb86-08e4ecc52b4f_large.webp"
                        },
                        new
                        {
                            Id = 23,
                            Address = "Велико Търново, Център",
                            City = "Велико Търново",
                            Description = "A charming salon! Just enough space for two clients at a time.",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d2888.5254050277763!2d25.3385685!3d43.6164224!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40ae61d70f2a5bf1%3A0x3966bc48c4813196!2z0JzQkNCd0JjQmtCu0KDQndCY0KbQqiBWSVZJIE5BSUxT!5e0!3m2!1sen!2sbg!4v1711374877328!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Creative Nails Studio",
                            OwnerId = "f49b96c1-0e67-4e43-a68e-5cbecc1dd9b6",
                            PhoneNumber = "0886772005",
                            ProfilePictureUrl = "https://i.imgur.com/raORBFS.jpeg"
                        },
                        new
                        {
                            Id = 22,
                            Address = "Hadzhi Dimitar, ul. \"Macgahan\", 1510 Sofia",
                            City = "София",
                            Description = "We are doing it fine",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d46920.113329192274!2d23.241646648632805!3d42.69298260000001!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40aa8fde4811e841%3A0x6da382afd9afe86a!2sIndigo%20Nails%20Lab%20Sofia!5e0!3m2!1sen!2sbg!4v1712669308291!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Indigo Nails Lab",
                            OwnerId = "06af8218-64b2-4d25-ae5f-5b1dcb8ad498",
                            PhoneNumber = "0892949291",
                            ProfilePictureUrl = "https://lh5.googleusercontent.com/p/AF1QipPPINiy2hRdxKK4QXVY258Al3PuOhLUB17xzTMk=w427-h240-k-no"
                        },
                        new
                        {
                            Id = 25,
                            Address = "Varna CenterPrimorski, ul. \"Felix Kanitz\" 11, 9000 Varna",
                            City = "Варна",
                            Description = "A wonderful center for beauty and relaxation! https://laquebg.com/",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d46526.144999075295!2d27.852192348632826!3d43.211921!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40a453526da6d625%3A0xc0e67b2ed38f22c5!2sBeauty%20Lounge%20Laque!5e0!3m2!1sen!2sbg!4v1712670000030!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Beauty Lounge Laque",
                            OwnerId = "bb5f0982-f2b5-4f59-bf4a-6ff7e5b86aa0",
                            PhoneNumber = "0899255285",
                            ProfilePictureUrl = "https://lh5.googleusercontent.com/p/AF1QipO0W6HfRQKDRoGMBy0aD3FLCZHy7sKLNV8SXtov=w426-h240-k-no"
                        },
                        new
                        {
                            Id = 26,
                            Address = "кв. Опълченски, bul. \"Sveti Patriarh Evtimiy\" 80a, 6000 Stara Zagora",
                            City = "Стара Загора",
                            Description = "Refined, cozy and always ready to surprise you with something new!",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d23561.145796981284!2d25.60807998875483!3d42.42468618489927!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40a8698ad981f835%3A0xa789d87f594807b1!2z0JrRitGJ0LDRgtCwINC90LAg0L3QvtC60YLQuNGC0LU!5e0!3m2!1sen!2sbg!4v1712670161018!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Къщата на ноктите",
                            OwnerId = "6d1741e7-037a-40fd-bd5a-914eb486a7f2",
                            PhoneNumber = "0877111584",
                            ProfilePictureUrl = "https://lh5.googleusercontent.com/p/AF1QipPhPrguBRa_NBhsHYEVaMGODr5fsO1vW0SbWQrk=w408-h725-k-no"
                        });
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9cb5e437-6f1c-45af-8748-37fab040c133",
                            AccessFailedCount = 0,
                            City = "Zion",
                            ConcurrencyStamp = "763fb6c0-4e35-490f-a736-468151e64005",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Almighty",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PhoneNumber = "0888000000",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://wallpapers.com/images/high/funny-profile-picture-ylwnnorvmvk2lna0.webp",
                            SecurityStamp = "509e4df2-883b-4112-9092-26cb8ad8db96",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "e0b4f60e-97d7-4d4c-bd9c-af9fdb80a12a",
                            AccessFailedCount = 0,
                            City = "Svishtov",
                            ConcurrencyStamp = "8860c1b1-59a3-4cd9-9e8e-49812b52687d",
                            Email = "irina@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Irina",
                            LastName = "Teodosieva",
                            LockoutEnabled = false,
                            NormalizedEmail = "IRINA@GMAIL.COM",
                            NormalizedUserName = "IRINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAHRi9Y3EvCdxWJPuQBeCEXc9gJss2YFTiPYai/X3AG7KeEsksRfszdzNsWpNhmSjg==",
                            PhoneNumber = "0888191919",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/BxxyXQ3.jpg",
                            SecurityStamp = "347cf964-0fd8-4c8c-8a4f-0a037c9e11f7",
                            TwoFactorEnabled = false,
                            UserName = "irina@gmail.com"
                        },
                        new
                        {
                            Id = "7f6d9128-eb2a-4017-9be4-de846f4092a8",
                            AccessFailedCount = 0,
                            City = "Svishtov",
                            ConcurrencyStamp = "c55bba16-39c1-4e0a-baf1-a4714aad1bd1",
                            Email = "salonownersv@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            LastName = "Ivanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALONOWNERSV@GMAIL.COM",
                            NormalizedUserName = "SALONOWNERSV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHqM2+zTDxnqEMEG50JZnwqz2iO2Cu8WpCEewWfAbVR2UHIyrWPXHAxpFRwXAchqZQ==",
                            PhoneNumber = "0878123321",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/8jIgBan.jpg",
                            SecurityStamp = "744c73ff-2e8d-4fb9-b672-52f5d9273b21",
                            TwoFactorEnabled = false,
                            UserName = "salonownersv@gmail.com"
                        },
                        new
                        {
                            Id = "f8c71f1f-00d7-4f20-83d0-af5d2c6ab9e1",
                            AccessFailedCount = 0,
                            City = "Pleven",
                            ConcurrencyStamp = "377078ee-3800-4a9a-8d97-215322bb9219",
                            Email = "salonownerpl@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivanka",
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALONOWNERPL@GMAIL.COM",
                            NormalizedUserName = "SALONOWNERPL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGlmqK+EcCQ5/tShh2DL7KGyjrfVh9ZxYHuHuJaxZ3ncc6RfphYz+NU5aTL2pat7fA==",
                            PhoneNumber = "0886998877",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/hMfYO4Z.jpg",
                            SecurityStamp = "e831f014-9c6a-4d69-8ff7-f4667c8b1d96",
                            TwoFactorEnabled = false,
                            UserName = "salonownerpl@gmail.com"
                        },
                        new
                        {
                            Id = "eb257b08-cc37-41c6-9bc4-7b85cf4dcb1e",
                            AccessFailedCount = 0,
                            City = "Ruse",
                            ConcurrencyStamp = "4f4f38c2-3284-40e0-8af6-b2f7f6eb4de9",
                            Email = "salonownerrs@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Penka",
                            LastName = "Stoyanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALONOWNERRS@GMAIL.COM",
                            NormalizedUserName = "SALONOWNERRS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELmifV/lX8GAd8DUVdPT/NJ++93mNsp9Y2XKBgv60G3Nvtn4IwZmpTmbdSK3rJipeA==",
                            PhoneNumber = "0878359953",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/1B3E0us.jpg",
                            SecurityStamp = "5e843566-c67f-4d74-8b47-201e14c057d2",
                            TwoFactorEnabled = false,
                            UserName = "salonownerrs@gmail.com"
                        },
                        new
                        {
                            Id = "f49b96c1-0e67-4e43-a68e-5cbecc1dd9b6",
                            AccessFailedCount = 0,
                            City = "Veliko Tarnovo",
                            ConcurrencyStamp = "7778ad01-4fd9-4d1c-ba27-d1782525008a",
                            Email = "salonownervt@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stefka",
                            LastName = "Dimitrova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALONOWNERVT@GMAIL.COM",
                            NormalizedUserName = "SALONOWNERVT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO+1AWBhtNDH5A5FQTXNuGCC2h1un6ze2/BhAuicpyT36oM56aIsiKFg7y4Ntto/kA==",
                            PhoneNumber = "0886456456",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/2uYHs01.jpg",
                            SecurityStamp = "7cbb3e85-8414-4253-bca0-7b42f08481a3",
                            TwoFactorEnabled = false,
                            UserName = "salonownervt@gmail.com"
                        },
                        new
                        {
                            Id = "06af8218-64b2-4d25-ae5f-5b1dcb8ad498",
                            AccessFailedCount = 0,
                            City = "Sofia",
                            ConcurrencyStamp = "483a163d-5526-4998-aa8f-0aae5e9aaeec",
                            Email = "salonownersf@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Elena",
                            LastName = "Georgieva",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALONOWNERSF@GMAIL.COM",
                            NormalizedUserName = "SALONOWNERSF@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFl/9XcFLjZVzPeYQcR642QIzW+WqVj2O+ZL9n5gjEIEE0U4JSvTg1xOdv3gbe3/Sg==",
                            PhoneNumber = "0883020202",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/Z9C8Ey2.jpg",
                            SecurityStamp = "c9090616-147b-4051-ab80-4588723e201d",
                            TwoFactorEnabled = false,
                            UserName = "salonownersf@gmail.com"
                        },
                        new
                        {
                            Id = "6d1741e7-037a-40fd-bd5a-914eb486a7f2",
                            AccessFailedCount = 0,
                            City = "Stara Zagora",
                            ConcurrencyStamp = "c235668e-6e7f-4727-9be6-499c0b69b7ee",
                            Email = "salonownersz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ani",
                            LastName = "Todorova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALONOWNERSZ@GMAIL.COM",
                            NormalizedUserName = "SALONOWNERSZ@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELGwHK5tB3fkuigsyh63J7mtaT/tA2qPdFVWyjtElKs4EI9Gobgr0AeftMOFbyWA/w==",
                            PhoneNumber = "0883789456",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/IzSbYjB.jpg",
                            SecurityStamp = "2dcd1229-49ce-4dfa-91ec-aec14dc51076",
                            TwoFactorEnabled = false,
                            UserName = "salonownersz@gmail.com"
                        },
                        new
                        {
                            Id = "bb5f0982-f2b5-4f59-bf4a-6ff7e5b86aa0",
                            AccessFailedCount = 0,
                            City = "Varna",
                            ConcurrencyStamp = "0e2c08d2-c9df-42c3-bbf4-67f3878aa5c8",
                            Email = "salonownervn@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Tanya",
                            LastName = "Koleva",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALONOWNERVN@GMAIL.COM",
                            NormalizedUserName = "SALONOWNERVN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMFwCh1ncpNTndU258GcsBVAzaGC8Q0HdyrD1M/1sbKyesDmX2E+LytxYWgx87Pjog==",
                            PhoneNumber = "0888699699",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/oiKMnVI.jpg",
                            SecurityStamp = "9f28f4a5-60d2-461e-a5cc-88f40501c307",
                            TwoFactorEnabled = false,
                            UserName = "salonownervn@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Appointment", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.Salon", "Salon")
                        .WithMany("Appointments")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Chat.ChatMessage", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.Chat.ChatRoom", "ChatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Chat.ChatRoom", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Photo", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.Salon", "Salon")
                        .WithMany("Photos")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.Salon", "Salon")
                        .WithMany("Reviews")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Salon", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Chat.ChatRoom", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Salon", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Photos");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
