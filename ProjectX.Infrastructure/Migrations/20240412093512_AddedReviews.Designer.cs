// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectX.Infrastructure.Data;

#nullable disable

namespace ProjectX.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240412093512_AddedReviews")]
    partial class AddedReviews
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Chat.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Chat.ChatRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SalonId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Salon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Salons");

                    b.HasData(
                        new
                        {
                            Id = 20,
                            Address = "Център, ул. Александър Стамболийски 9",
                            City = "Свищов",
                            Description = "Салон за маникюр",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d5777.085309706417!2d25.3442666!3d43.6160633!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40aea1f74f8db6d7%3A0xd99b65173dd11469!2z4oCcTGEgZmFtbWXigJ0!5e0!3m2!1sbg!2sbg!4v1711382622231!5m2!1sbg!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "La Famme",
                            OwnerId = "7f6d9128-eb2a-4017-9be4-de846f4092a8",
                            PhoneNumber = "0879425962",
                            ProfilePictureUrl = "https://i.imgur.com/gqbirC4.jpeg"
                        },
                        new
                        {
                            Id = 27,
                            Address = "блок 4, Tsentar, ul. \"27-mi yuni\" 1, вход А",
                            City = "Свищов",
                            Description = "Identifies as women-owned",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d5776.887118560986!2d25.3326450935791!3d43.6181262!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40ae61d70f2a5bf1%3A0x3966bc48c4813196!2z0JzQkNCd0JjQmtCu0KDQndCY0KbQqiBWSVZJIE5BSUxT!5e0!3m2!1sen!2sbg!4v1712749078365!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "МАНИКЮРНИЦЪ VIVI NAILS",
                            OwnerId = "7f6d9128-eb2a-4017-9be4-de846f4092a8",
                            PhoneNumber = "0877277879",
                            ProfilePictureUrl = "https://img.freepik.com/free-photo/manicurist-master-makes-manicure-woman-s-hands-spa-treatment-concept_186202-7778.jpg"
                        },
                        new
                        {
                            Id = 28,
                            Address = "Tsentar, \" Хр. Ботев \" 3",
                            City = "Свищов",
                            Description = "The best medical treatment for nail issues  in the district.",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d5777.210144474986!2d25.343323393579098!3d43.6147639!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40aea16f96ef181b%3A0xf92742122d7eca0a!2z0KHQsNC70L7QvSDQlNCw0JzQsNC60L4!5e0!3m2!1sen!2sbg!4v1712750214361!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Салон ДаМако",
                            OwnerId = "7f6d9128-eb2a-4017-9be4-de846f4092a8",
                            PhoneNumber = "0893348878",
                            ProfilePictureUrl = "https://static.wixstatic.com/media/b8583971442d48568f1d10b9554b4238.jpg/v1/fill/w_640,h_1044,al_c,q_85,usm_0.66_1.00_0.01,enc_auto/b8583971442d48568f1d10b9554b4238.jpg"
                        },
                        new
                        {
                            Id = 29,
                            Address = "ул. Княз Борис I, No 11",
                            City = "Свищов",
                            Description = "Discover the perfect blend of style and sophistication at our nail boutique, offering personalized nail treatments.",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d5777.210144474986!2d25.343323393579098!3d43.6147639!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40aea1deaa3b9ef5%3A0x5779bb4be7474e1!2z0KHRgtGD0LTQuNC-ICJXaXRoIExvdmUi!5e0!3m2!1sen!2sbg!4v1712750122920!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Студио \"With Love\"",
                            OwnerId = "7f6d9128-eb2a-4017-9be4-de846f4092a8",
                            PhoneNumber = "0886410904",
                            ProfilePictureUrl = "https://enchantedspadc.com/wp-content/uploads/2020/12/Enchanted-Nails-and-Spa-manicure-20009.jpg"
                        },
                        new
                        {
                            Id = 22,
                            Address = "Hadzhi Dimitar, ul. \"Macgahan\", 1510 Sofia",
                            City = "София",
                            Description = "We are doing it fine",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d46920.113329192274!2d23.241646648632805!3d42.69298260000001!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40aa8fde4811e841%3A0x6da382afd9afe86a!2sIndigo%20Nails%20Lab%20Sofia!5e0!3m2!1sen!2sbg!4v1712669308291!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Indigo Nails Lab",
                            OwnerId = "06af8218-64b2-4d25-ae5f-5b1dcb8ad498",
                            PhoneNumber = "0892949291",
                            ProfilePictureUrl = "https://img.freepik.com/free-photo/hands-with-beautiful-nails_23-2149936852.jpg"
                        },
                        new
                        {
                            Id = 32,
                            Address = "Sofia Center, Vitosha Blvd 1",
                            City = "София",
                            Description = "Escape the hustle and bustle and unwind at our cozy nail lounge, where comfort meets professionalism.",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2970241.0822246317!2d19.73989057359654!3d43.363931983567646!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40aa85a43ce24eb7%3A0xafbc60f53f14030a!2sNika%20Nails%20Factory!5e0!3m2!1sen!2sbg!4v1712751063496!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Nika Nails Factory",
                            OwnerId = "06af8218-64b2-4d25-ae5f-5b1dcb8ad498",
                            PhoneNumber = "0899389949",
                            ProfilePictureUrl = "https://studio24.bg/pictures/studios/9/9036/thumbs/0x630/47866.jpg"
                        },
                        new
                        {
                            Id = 33,
                            Address = "Oborishte, ul. \"Cherkovna\" 54",
                            City = "София",
                            Description = "Transform your nails into works of art at our trendy nail bar, where creativity knows no bounds.",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2970241.0822246317!2d19.73989057359654!3d43.363931983567646!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40aa85f6b92c4bf1%3A0x695f9b31aa2a9db6!2sLuxury%20Nails%20by%20Desislava%20Gancheva!5e0!3m2!1sen!2sbg!4v1712751187294!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Luxury Nails by Desislava Gancheva",
                            OwnerId = "06af8218-64b2-4d25-ae5f-5b1dcb8ad498",
                            PhoneNumber = "0898761300",
                            ProfilePictureUrl = "https://i.pinimg.com/originals/b4/79/d7/b479d7e3f43418eee4a5af526cc96239.jpg"
                        },
                        new
                        {
                            Id = 34,
                            Address = "Ул.Любен Каравелов 38, Партер",
                            City = "София",
                            Description = "Experience top-notch nail care in a welcoming atmosphere at our boutique salon, dedicated to exceeding expectations.",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3003186.551918595!2d18.449533312500016!3d42.68679210000003!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40aa8593f06fa7bd%3A0xd8296a26c5d2ac08!2sNail%20bar%20Bibi!5e0!3m2!1sen!2sbg!4v1712751359574!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Nail bar Bibi",
                            OwnerId = "06af8218-64b2-4d25-ae5f-5b1dcb8ad498",
                            PhoneNumber = "0889188570",
                            ProfilePictureUrl = "https://studio24.bg/pictures/studios/0/910/thumbs/0x630/10784.jpeg"
                        },
                        new
                        {
                            Id = 21,
                            Address = "Плевен Център, бул. „Русе“ 41",
                            City = "Плевен",
                            Description = "Качествено обслужване и любезно отношение",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d11593.032916301672!2d24.618113!3d43.4134312!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40abf5b3df4f8007%3A0x6f67c2632e3dd468!2zIk15c3RpYyI!5e0!3m2!1sbg!2sbg!4v1711382732592!5m2!1sbg!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Mystic",
                            OwnerId = "f8c71f1f-00d7-4f20-83d0-af5d2c6ab9e1",
                            PhoneNumber = "0877494952",
                            ProfilePictureUrl = "https://i.imgur.com/vfnVhfJ.jpeg"
                        },
                        new
                        {
                            Id = 30,
                            Address = "Pleven Center, ul. \"Odesa\" 27",
                            City = "Плевен",
                            Description = "Experience the ultimate pampering session at our nail studio, where skilled technicians create stunning nail art.",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2967656.6814909396!2d19.7401186125!3d43.41669079999999!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40abf579ee774fe5%3A0x85ce62a9032b49f5!2sStudio%20Nails%20PT!5e0!3m2!1sen!2sbg!4v1712750422891!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Studio Nails PT",
                            OwnerId = "f8c71f1f-00d7-4f20-83d0-af5d2c6ab9e1",
                            PhoneNumber = "0988786214",
                            ProfilePictureUrl = "https://images.fresha.com/locations/location-profile-images/490308/856148/bebd02a5-2ec0-48e1-8926-d35c9f0f7df4.jpg"
                        },
                        new
                        {
                            Id = 31,
                            Address = "Pleven Center, ul. \"Veslets\" 3",
                            City = "Плевен",
                            Description = "Indulge in luxury nail care at our salon, where every detail is meticulously attended to for a flawless finish.",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2967656.6814909396!2d19.7401186125!3d43.41669079999999!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40abf5c74d35386b%3A0xa04293a144d688fa!2sPrimaDonna%20Nails%20Salon%20%26%20School!5e0!3m2!1sen!2sbg!4v1712750810148!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "PrimaDonna Nails Salon & School",
                            OwnerId = "f8c71f1f-00d7-4f20-83d0-af5d2c6ab9e1",
                            PhoneNumber = "0884325852",
                            ProfilePictureUrl = "https://images.squarespace-cdn.com/content/v1/5a28c1a349fc2b8ed19e1b3a/1684020222208-OTUNGEXDQK9SGKU74RC2/image-asset.jpeg"
                        },
                        new
                        {
                            Id = 23,
                            Address = "Велико Търново, Център",
                            City = "Велико Търново",
                            Description = "A charming salon! Just enough space for two clients at a time.",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d2888.5254050277763!2d25.3385685!3d43.6164224!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40ae61d70f2a5bf1%3A0x3966bc48c4813196!2z0JzQkNCd0JjQmtCu0KDQndCY0KbQqiBWSVZJIE5BSUxT!5e0!3m2!1sen!2sbg!4v1711374877328!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Creative Nails Studio",
                            OwnerId = "f49b96c1-0e67-4e43-a68e-5cbecc1dd9b6",
                            PhoneNumber = "0886772005",
                            ProfilePictureUrl = "https://i.imgur.com/raORBFS.jpeg"
                        },
                        new
                        {
                            Id = 35,
                            Address = "g.k. Akatsia, ul. \"Tsvetarska\" 14",
                            City = "Велико Търново",
                            Description = "Step into our modern nail studio and leave feeling refreshed, rejuvenated, and ready to conquer the world.",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d11657.330144674672!2d25.61236910644684!3d43.076503761847725!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40a9260fde459edf%3A0xdc0ea8d72de85eb9!2sFunStyle%20MS!5e0!3m2!1sen!2sbg!4v1712751825383!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "FunStyle MS",
                            OwnerId = "f49b96c1-0e67-4e43-a68e-5cbecc1dd9b6",
                            PhoneNumber = "0888989462",
                            ProfilePictureUrl = "https://annassalonelite.com/blog/wp-content/uploads/2020/05/Annas-5.31.jpg"
                        },
                        new
                        {
                            Id = 24,
                            Address = "Ruse Center, ul. \"Chavdar voyvoda\" 14, 7002 Ruse",
                            City = "Русе",
                            Description = "The best manicurist in town",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d46033.183433977734!2d25.880205548632812!3d43.85429559999999!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40ae60cc33356905%3A0x5b71f9abc1296973!2sNail%20Art%20%26%20Make%20Up%20Atelie%20Maya%20Ilieva!5e0!3m2!1sen!2sbg!4v1712669597567!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Nail Art & Make Up Atelie Maya Ilieva",
                            OwnerId = "eb257b08-cc37-41c6-9bc4-7b85cf4dcb1e",
                            PhoneNumber = "0895338842",
                            ProfilePictureUrl = "https://assets.isu.pub/document-structure/230303101435-3c94967ebc548d2d2d70b12a8e02701f/v1/0b209de76d246f148c6f588f808daec7.jpeg"
                        },
                        new
                        {
                            Id = 25,
                            Address = "Varna CenterPrimorski, ul. \"Felix Kanitz\" 11, 9000 Varna",
                            City = "Варна",
                            Description = "A wonderful center for beauty and relaxation! https://laquebg.com/",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d46526.144999075295!2d27.852192348632826!3d43.211921!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40a453526da6d625%3A0xc0e67b2ed38f22c5!2sBeauty%20Lounge%20Laque!5e0!3m2!1sen!2sbg!4v1712670000030!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Beauty Lounge Laque",
                            OwnerId = "bb5f0982-f2b5-4f59-bf4a-6ff7e5b86aa0",
                            PhoneNumber = "0899255285",
                            ProfilePictureUrl = "https://holrmagazine.com/wp-content/uploads/2021/07/nail-bar1-759x500.jpeg"
                        },
                        new
                        {
                            Id = 26,
                            Address = "кв. Опълченски, bul. \"Sveti Patriarh Evtimiy\" 80a, 6000 Stara Zagora",
                            City = "Стара Загора",
                            Description = "Refined, cozy and always ready to surprise you with something new!",
                            MapUrl = "<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d23561.145796981284!2d25.60807998875483!3d42.42468618489927!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40a8698ad981f835%3A0xa789d87f594807b1!2z0JrRitGJ0LDRgtCwINC90LAg0L3QvtC60YLQuNGC0LU!5e0!3m2!1sen!2sbg!4v1712670161018!5m2!1sen!2sbg\" width=\"600\" height=\"450\" style=\"border:0;\" allowfullscreen=\"\" loading=\"lazy\" referrerpolicy=\"no-referrer-when-downgrade\"></iframe>",
                            Name = "Къщата на ноктите",
                            OwnerId = "6d1741e7-037a-40fd-bd5a-914eb486a7f2",
                            PhoneNumber = "0877111584",
                            ProfilePictureUrl = "https://imgrabo.com/pics/deals/14855085809332.jpeg"
                        });
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9cb5e437-6f1c-45af-8748-37fab040c133",
                            AccessFailedCount = 0,
                            City = "Zion",
                            ConcurrencyStamp = "6d781f76-e514-46c6-b647-abe6499ba246",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Almighty",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PhoneNumber = "0888000000",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://wallpapers.com/images/high/funny-profile-picture-ylwnnorvmvk2lna0.webp",
                            SecurityStamp = "f33dba9c-9b5d-46c2-bd4f-009e85b63d76",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "e0b4f60e-97d7-4d4c-bd9c-af9fdb80a12a",
                            AccessFailedCount = 0,
                            City = "Svishtov",
                            ConcurrencyStamp = "751ca298-a31d-4e6f-8c64-2a46d6e9e9f7",
                            Email = "irina@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Irina",
                            LastName = "Teodosieva",
                            LockoutEnabled = false,
                            NormalizedEmail = "IRINA@GMAIL.COM",
                            NormalizedUserName = "IRINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDhI6jY6K58CCW6GhH2tJ71NPnLl2PPfF+JrweK/k0wQ2jy1RNYEAJCC+O3oafK/+A==",
                            PhoneNumber = "0888191919",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/BxxyXQ3.jpg",
                            SecurityStamp = "da9a2ca1-810e-4cd4-9cfa-e64616bd540d",
                            TwoFactorEnabled = false,
                            UserName = "irina@gmail.com"
                        },
                        new
                        {
                            Id = "7f6d9128-eb2a-4017-9be4-de846f4092a8",
                            AccessFailedCount = 0,
                            City = "Svishtov",
                            ConcurrencyStamp = "d0b2013c-7f3e-4112-9bdb-fae93d414dbd",
                            Email = "salonownersv@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Maria",
                            LastName = "Ivanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALONOWNERSV@GMAIL.COM",
                            NormalizedUserName = "SALONOWNERSV@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBaQuuVgK8C0FS1/Y0cabKXqveLTF9HnRO5/lv7p/E47uZNwdfMA4R+y8KFdYuEjcA==",
                            PhoneNumber = "0878123321",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/8jIgBan.jpg",
                            SecurityStamp = "74fb5955-65a7-4d71-adb0-50fa31686cb9",
                            TwoFactorEnabled = false,
                            UserName = "salonownersv@gmail.com"
                        },
                        new
                        {
                            Id = "f8c71f1f-00d7-4f20-83d0-af5d2c6ab9e1",
                            AccessFailedCount = 0,
                            City = "Pleven",
                            ConcurrencyStamp = "a3c671b9-65c6-44eb-b00a-51a6e4b8f2bf",
                            Email = "salonownerpl@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ivanka",
                            LastName = "Petrova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALONOWNERPL@GMAIL.COM",
                            NormalizedUserName = "SALONOWNERPL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKt9xBVTrdtoHbNCrwWd31gjfSdFoWQrd/hGXtw6Obtv2jngqLzY6tUIUDskWjmnfw==",
                            PhoneNumber = "0886998877",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/hMfYO4Z.jpg",
                            SecurityStamp = "168c5be8-6a27-4048-993d-26f675fd70b4",
                            TwoFactorEnabled = false,
                            UserName = "salonownerpl@gmail.com"
                        },
                        new
                        {
                            Id = "eb257b08-cc37-41c6-9bc4-7b85cf4dcb1e",
                            AccessFailedCount = 0,
                            City = "Ruse",
                            ConcurrencyStamp = "5ba9137d-b68d-4079-abe3-9a991e9714bf",
                            Email = "salonownerrs@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Penka",
                            LastName = "Stoyanova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALONOWNERRS@GMAIL.COM",
                            NormalizedUserName = "SALONOWNERRS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN/TmhxmiarknPMvi10cFP6qteWbO4YrlJSnSEv9e/HXw5EtEaknCudw82L5SviiQA==",
                            PhoneNumber = "0878359953",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/1B3E0us.jpg",
                            SecurityStamp = "d53c2ad9-24c0-4b76-aa1a-0295945f5fd5",
                            TwoFactorEnabled = false,
                            UserName = "salonownerrs@gmail.com"
                        },
                        new
                        {
                            Id = "f49b96c1-0e67-4e43-a68e-5cbecc1dd9b6",
                            AccessFailedCount = 0,
                            City = "Veliko Tarnovo",
                            ConcurrencyStamp = "c949f7c7-4894-4931-a969-9ea7777212de",
                            Email = "salonownervt@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Stefka",
                            LastName = "Dimitrova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALONOWNERVT@GMAIL.COM",
                            NormalizedUserName = "SALONOWNERVT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIvq5k6bVy7y+d2M6b2YyZ6TCDpJDyJEzZXVOtFzyJuVTqrEoTOclaqf7yXXeQXi7w==",
                            PhoneNumber = "0886456456",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/2uYHs01.jpg",
                            SecurityStamp = "aa090d01-38b9-4355-8d7d-ff0d51f9629c",
                            TwoFactorEnabled = false,
                            UserName = "salonownervt@gmail.com"
                        },
                        new
                        {
                            Id = "06af8218-64b2-4d25-ae5f-5b1dcb8ad498",
                            AccessFailedCount = 0,
                            City = "Sofia",
                            ConcurrencyStamp = "a8f78188-ae0a-41af-b895-66ff0aecaed3",
                            Email = "salonownersf@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Elena",
                            LastName = "Georgieva",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALONOWNERSF@GMAIL.COM",
                            NormalizedUserName = "SALONOWNERSF@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMxZLsArjJs8u/CyzLFVo4iH+ofl5fGfUG5QRqKJHbRpPfsquCqc4xmJ5HEfpl0tMg==",
                            PhoneNumber = "0883020202",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/Z9C8Ey2.jpg",
                            SecurityStamp = "b5620046-9e82-44b9-8ea9-cac22265ff72",
                            TwoFactorEnabled = false,
                            UserName = "salonownersf@gmail.com"
                        },
                        new
                        {
                            Id = "6d1741e7-037a-40fd-bd5a-914eb486a7f2",
                            AccessFailedCount = 0,
                            City = "Stara Zagora",
                            ConcurrencyStamp = "179a6d94-dc25-4a7f-8d40-b856841168f9",
                            Email = "salonownersz@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ani",
                            LastName = "Todorova",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALONOWNERSZ@GMAIL.COM",
                            NormalizedUserName = "SALONOWNERSZ@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDAAPaMtLtCgN9yDPJwIbFJPrvbHyPXrI9A+tPRYCLkF2Xjb103bjy6UfnDX7sC0rw==",
                            PhoneNumber = "0883789456",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/IzSbYjB.jpg",
                            SecurityStamp = "5be536a1-e9e8-4f70-8760-080c5b6c43d0",
                            TwoFactorEnabled = false,
                            UserName = "salonownersz@gmail.com"
                        },
                        new
                        {
                            Id = "bb5f0982-f2b5-4f59-bf4a-6ff7e5b86aa0",
                            AccessFailedCount = 0,
                            City = "Varna",
                            ConcurrencyStamp = "69964661-fd6e-478c-b6ac-4a8aae46c799",
                            Email = "salonownervn@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Tanya",
                            LastName = "Koleva",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALONOWNERVN@GMAIL.COM",
                            NormalizedUserName = "SALONOWNERVN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECOXDUxQ2KvAVmHB3P0B0SXDhrSpw6idoNU1ksu7FNaXlZYsJp8XEKVpTBzNxNo0rg==",
                            PhoneNumber = "0888699699",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://i.imgur.com/oiKMnVI.jpg",
                            SecurityStamp = "7bc7a927-ea7b-4dae-b0d0-b256b65154e4",
                            TwoFactorEnabled = false,
                            UserName = "salonownervn@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Appointment", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.Salon", "Salon")
                        .WithMany("Appointments")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Salon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Chat.ChatMessage", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.Chat.ChatRoom", "ChatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Chat.ChatRoom", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.Salon", "Salon")
                        .WithMany()
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Photo", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.Salon", "Salon")
                        .WithMany("Photos")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Review", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.Salon", "Salon")
                        .WithMany("Reviews")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Salon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Salon", b =>
                {
                    b.HasOne("ProjectX.Infrastructure.Data.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Chat.ChatRoom", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.Salon", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Photos");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ProjectX.Infrastructure.Data.Models.User", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
